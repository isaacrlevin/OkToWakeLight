@page "/add"

@inject NavigationManager Nav
@inject IPageHelper PageHelper
@inject OkToWakeContext _context

<NavLink class="nav-link" href="/">
    Back
</NavLink>
@if (Schedule != null)
{
    <ScheduleForm Busy="@Busy" LIFXService="LIFXService"
                  Schedule="@Schedule"
                  IsAdd="true"
                  CancelRequest="Cancel"
                  ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (Success)
{
    <br />
    <div class="alert alert-success">The schedule was successfully added.</div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to update the schedule (@ErrorMessage).</div>
}

@code { /// <summary>
    /// New <see cref="Schedule"/>.
    /// </summary>
    private Schedule Schedule { get; set; }

    /// <summary>
    /// <c>True</c> when an asynchronous operation is running.
    /// </summary>
    private bool Busy;

    /// <summary>
    /// <c>True</c> after successful add.
    /// </summary>
    private bool Success;

    /// <summary>
    /// <c>True</c> when an error occurred.
    /// </summary>
    private bool Error;

    /// <summary>
    /// The error message
    /// </summary>
    private string ErrorMessage = string.Empty;

    private LIFXService LIFXService { get; set; }

    /// <summary>
    /// Start with fresh <see cref="Schedule"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override Task OnInitializedAsync()
    {
        Schedule = new Schedule();
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// Respond to a forms submission.
    /// </summary>
    /// <param name="success"><c>True</c> when valid.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }

        Busy = true;

        // this just attaches
        _context.Schedules.Add(Schedule);

        try
        {
            await _context.SaveChangesAsync();
            Success = true;
            Error = false;
            // ready for the next
            Schedule = new Schedule();
            Busy = false;
        }
        catch (Exception ex)
        {
            Success = false;
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Back to list.
    /// </summary>
    private void Cancel()
    {
        Nav.NavigateTo($"/{PageHelper.Page}");
    } 
}
