@page "/edit/{ScheduleId:guid}"

@using Microsoft.EntityFrameworkCore;
@using BlazorColorPicker
@using OkToWake.Models
@inject OkToWakeContext _context

@inject NavigationManager Nav
@inject EditSuccess EditSuccessState

<NavLink class="nav-link" href="/">
    Back
</NavLink>
@if (Schedule == null && !Busy)
{
    <p>Could not find schedule with id @ScheduleId.</p>
}
else
{
    <ScheduleForm Busy="@Busy" Schedule="@Schedule" LIFXService="LIFXService"
                  DbSchedule="@DbSchedule"
                  IsAdd="false"
                  CancelRequest="Cancel"
                  ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (ConcurrencyError)
{
    <br />
    <div class="alert alert-danger">
        <p>
            The schedule details have changed since it was last loaded. The updated fields are highlighted in the form.
            Please choose an option:
        </p>
        <p><b>Cancel</b> to lose your changes and keep the database version.</p>
        <p><b>Submit</b> to force an update with your version.</p>
    </div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to update the schedule (@ErrorMessage).</div>
}

@code { /// <summary>
    /// Id of schedule to edit
    /// </summary>
    [Parameter]
    public Guid ScheduleId { get; set; }

    /// <summary>
    /// Schedule being edited
    /// </summary>
    private Schedule Schedule { get; set; }

    private LIFXService LIFXService { get; set; }

    /// <summary>
    /// Database version when concurrency issues exist
    /// </summary>
    private Schedule DbSchedule { get; set; }

    /// <summary>
    /// Avoid concurrent requests
    /// </summary>
    private bool Busy;

    /// <summary>
    /// An error occurred in the update
    /// </summary>
    private bool Error;

    /// <summary>
    /// A concurrency error needs resolution
    /// </summary>
    private bool ConcurrencyError;

    /// <summary>
    /// Error message
    /// </summary>
    private string ErrorMessage = string.Empty;

    /// <summary>
    /// Start it up
    /// </summary>
    /// <returns>Task</returns>
    #region snippet2
    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            var schedules = await _context.Schedules.Include(a => a.TimeIntervals).ToListAsync();
            Schedule = schedules.Where(a => a.ScheduleId == ScheduleId).FirstOrDefault();
            //Schedule = await _context.Schedules
            //    .SingleOrDefaultAsync(c => c.ScheduleId == ScheduleId);
            LIFXService = new LIFXService(Schedule.LIFXApiKey);
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
    }
    #endregion

    /// <summary>
    /// Result of form validation
    /// </summary>
    /// <param name="success">Success when model is valid</param>
    /// <returns>Task</returns>
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            Error = false;
            ConcurrencyError = false;
            return;
        }

        Busy = true; // async
        try
        {
            await _context.SaveChangesAsync();
            EditSuccessState.Success = true;
            // go to view to see the record
            Nav.NavigateTo($"/view/{Schedule.ScheduleId}");
        }
        catch (DbUpdateConcurrencyException dbex)
        {
            EditSuccessState.Success = false;

            // concurrency issues!
            ConcurrencyError = true;

            // get values from database
            var dbValues = dbex.Entries[0].GetDatabaseValues();

            if (dbValues == null)
            {
                // deleted - show schedule not found
                Nav.NavigateTo($"/view/{Schedule.ScheduleId}");
                return;
            }

            // bind to show labels on form
            DbSchedule = (Schedule)dbValues.ToObject();

            // move to original so second submit works (unless there is another concurrent edit)
            dbex.Entries[0].OriginalValues.SetValues(dbValues);
            Error = false;
            Busy = false;
        }
        catch (Exception ex)
        {
            EditSuccessState.Success = false;
            // unknown exception
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Bail out!
    /// </summary>
    private void Cancel()
    {
        Busy = true;
        Nav.NavigateTo($"/");
    } }
